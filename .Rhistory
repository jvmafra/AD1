#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, comment.char="#")
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
gastos <- ler_gastos()
# Foram observados especialmente os atributos Partido, Nome, Valor Solicitado, Descricao e o Valor Liquido, ou seja, o que de fato foi recebido pelo deputado.
gastos <- gastos %>% select (1, 5, 6, 8, 15, 23)
names(gastos) <- c("Partido", "Nome", "UF", "Valor_solicitado", "Descricao", "Valor_liquido")
gastos <- gastos %>% filter (UF == "PB")
# Pelo gráfico de barras gerado, observa-se que os servicos mais requisitados pelos parlamentares sao PASSAGENS AEREAS e COMBUSTIVEIS/LUBRIFICANTES, mas não necessariamente os maiores valores gastos são com eles
ggplot(gastos) +
geom_bar(mapping = aes(x = Descricao)) + coord_flip()
agrupa_nome = gastos %>%
group_by(Nome) %>%
summarise(total = sum(Valor_liquido))
ggplot(agrupa_nome) +
geom_point(mapping = aes(x = Nome, y = total)) + coord_flip()
View(mean(agrupa_nome$total)) # Em media, quanto os deputados gastam?
ggplot(agrupa_nome) +
geom_histogram(mapping = aes(x = Descricao)) + coord_flip()
maior_valor = agrupa_nome %>% filter(total == max(total))
menor_valor = agrupa_nome %>% filter(total == min(total))
View(maior_valor) #deputado que mais gastou
View(menor_valor) #deputado que menos gastou
View(mean(gastos$Valor_liquido)) #O que cada deputado gasta em média para cada servico solicitado
agrupa_nome = gastos %>%
group_by(Nome) %>%
summarise(total = sum(Valor_liquido))
ggplot(agrupa_nome) +
geom_point(mapping = aes(x = Nome, y = total)) + coord_flip()
View(mean(agrupa_nome$total)) # Em media, quanto os deputados gastam?
ggplot(agrupa_nome) +
geom_histogram(mapping = aes(x = Descricao)) + coord_flip()
maior_valor = agrupa_nome %>% filter(total == max(total))
menor_valor = agrupa_nome %>% filter(total == min(total))
View(maior_valor) #deputado que mais gastou
View(menor_valor) #deputado que menos gastou
View(mean(gastos$Valor_liquido)) #O que cada deputado gasta em média para cada servico solicitado
agrupa_nome = gastos %>%
group_by(Nome) %>%
summarise(total = sum(Valor_liquido))
ggplot(agrupa_nome) +
geom_point(mapping = aes(x = Nome, y = total)) + coord_flip()
View(mean(agrupa_nome$total)) # Em media, quanto os deputados gastam?
maior_valor = agrupa_nome %>% filter(total == max(total))
menor_valor = agrupa_nome %>% filter(total == min(total))
View(maior_valor) #deputado que mais gastou
View(menor_valor) #deputado que menos gastou
View(mean(gastos$Valor_liquido)) #O que cada deputado gasta em média para cada servico solicitado
agrupa_nome = gastos %>%
group_by(Nome) %>%
summarise(total = sum(Valor_liquido))
ggplot(agrupa_nome) +
geom_point(mapping = aes(x = Nome, y = total)) + coord_flip()
View(mean(agrupa_nome$total)) # Em media, quanto os deputados gastam?
maior_valor = agrupa_nome %>% filter(total == max(total))
menor_valor = agrupa_nome %>% filter(total == min(total))
View(maior_valor) #deputado que mais gastou
View(menor_valor) #deputado que menos gastou
View(mean(gastos$Valor_liquido)) #O que cada deputado gasta em média para cada servico solicitado
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
theme_set(theme_bw())
# carregando dados
ler_gastos <- function(arquivo = "C:/Users/Mafra/Documents/AD1/workspace/AD1/dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, comment.char="#")
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
gastos <- ler_gastos()
# Foram observados especialmente os atributos Partido, Nome, Valor Solicitado, Descricao e o Valor Liquido, ou seja, o que de fato foi recebido pelo deputado.
gastos <- gastos %>% select (1, 5, 6, 8, 15, 23)
names(gastos) <- c("Partido", "Nome", "UF", "Valor_solicitado", "Descricao", "Valor_liquido")
gastos <- gastos %>% filter (UF == "PB")
# Foram observados especialmente os atributos Partido, Nome, Valor Solicitado, Descricao e o Valor Liquido, ou seja, o que de fato foi recebido pelo deputado.
gastos <- gastos %>% select (1, 5, 6, 8, 15, 23)
names(gastos) <- c("Partido", "Nome", "UF", "Valor_solicitado", "Descricao", "Valor_liquido")
gastos <- gastos %>% filter (UF == "PB")
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
theme_set(theme_bw())
# carregando dados
ler_gastos <- function(arquivo = "C:/Users/Mafra/Documents/AD1/workspace/AD1/dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, comment.char="#")
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
gastos <- ler_gastos()
# Foram observados especialmente os atributos Partido, Nome, Valor Solicitado, Descricao e o Valor Liquido, ou seja, o que de fato foi recebido pelo deputado.
gastos <- gastos %>% select (1, 5, 6, 8, 15, 23)
names(gastos) <- c("Partido", "Nome", "UF", "Valor_solicitado", "Descricao", "Valor_liquido")
gastos <- gastos %>% filter (UF == "PB")
# Pelo gráfico de barras gerado, observa-se que os servicos mais requisitados pelos parlamentares sao PASSAGENS AEREAS e COMBUSTIVEIS/LUBRIFICANTES, mas não necessariamente os maiores valores gastos são com eles
ggplot(gastos) +
geom_bar(mapping = aes(x = Descricao)) + coord_flip()
# carregando dados
ler_gastos <- function(arquivo = "C:/Users/Mafra/Documents/AD1/workspace/AD1/dados/ano-atual.csv"){
#' L? um csv criado a partir dos dados de gastos dos deputados da
#' C?mara e seta os tipos de colunas mais convenientemente.
#' Vers?o sem readr, para m?quinas onde n?o ? poss?vel instalar esse pacote.
#' ? um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, comment.char="#")
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
gastos <- ler_gastos()
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
theme_set(theme_bw())
# carregando dados
ler_gastos <- function(arquivo = "C:/Users/Mafra/Documents/AD1/workspace/AD1/dados/ano-atual.csv"){
#' L? um csv criado a partir dos dados de gastos dos deputados da
#' C?mara e seta os tipos de colunas mais convenientemente.
#' Vers?o sem readr, para m?quinas onde n?o ? poss?vel instalar esse pacote.
#' ? um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, comment.char="#")
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
gastos <- ler_gastos()
# Foram observados especialmente os atributos Partido, Nome, Valor Solicitado, Descricao e o Valor Liquido, ou seja, o que de fato foi recebido pelo deputado.
gastos <- gastos %>% select (1, 5, 6, 8, 15, 23)
names(gastos) <- c("Partido", "Nome", "UF", "Valor_solicitado", "Descricao", "Valor_liquido")
gastos <- gastos %>% filter (UF == "PB")
# Pelo gr?fico de barras gerado, observa-se que os servicos mais requisitados pelos parlamentares sao PASSAGENS AEREAS e COMBUSTIVEIS/LUBRIFICANTES, mas n?o necessariamente os maiores valores gastos s?o com eles
ggplot(gastos) +
geom_bar(mapping = aes(x = Descricao)) + coord_flip()
agrupa_nome = gastos %>%
group_by(Nome) %>%
summarise(total = sum(Valor_liquido))
ggplot(agrupa_nome) +
geom_point(mapping = aes(x = Nome, y = total)) + coord_flip()
View(mean(agrupa_nome$total)) # Em media, quanto os deputados gastam?
maior_valor = agrupa_nome %>% filter(total == max(total))
menor_valor = agrupa_nome %>% filter(total == min(total))
View(maior_valor) #deputado que mais gastou
View(menor_valor) #deputado que menos gastou
View(mean(gastos$Valor_liquido)) #O que cada deputado gasta em m?dia para cada servico solicitado
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
theme_set(theme_bw())
# carregando dados
ler_gastos <- function(arquivo = "C:/Users/Mafra/Documents/AD1/workspace/AD1/dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding="UTF-8")
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
gastos <- ler_gastos()
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
theme_set(theme_bw())
# carregando dados
ler_gastos <- function(arquivo = "C:/Users/Mafra/Documents/AD1/workspace/AD1/dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
gastos <- ler_gastos()
# Foram observados especialmente os atributos Partido, Nome, Valor Solicitado, Descricao e o Valor Liquido, ou seja, o que de fato foi recebido pelo deputado.
gastos <- gastos %>% select (1, 5, 6, 8, 15, 23)
names(gastos) <- c("Partido", "Nome", "UF", "Valor_solicitado", "Descricao", "Valor_liquido")
gastos <- gastos %>% filter (UF == "PB")
# Pelo gráfico de barras gerado, observa-se que os servicos mais requisitados pelos parlamentares sao PASSAGENS AEREAS e COMBUSTIVEIS/LUBRIFICANTES, mas não necessariamente os maiores valores gastos são com eles
ggplot(gastos) +
geom_bar(mapping = aes(x = Descricao)) + coord_flip()
agrupa_nome = gastos %>%
group_by(Nome) %>%
summarise(total = sum(Valor_liquido))
ggplot(agrupa_nome) +
geom_point(mapping = aes(x = Nome, y = total)) + coord_flip()
View(mean(agrupa_nome$total)) # Em media, quanto os deputados gastam?
maior_valor = agrupa_nome %>% filter(total == max(total))
menor_valor = agrupa_nome %>% filter(total == min(total))
View(maior_valor) #deputado que mais gastou
View(menor_valor) #deputado que menos gastou
View(mean(gastos$Valor_liquido)) #O que cada deputado gasta em média para cada servico solicitado
setwd("~/AD1/workspace/AD1")
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
library(knitr)
theme_set(theme_bw())
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
cota = cota %>%
mutate_each(funs(as.factor), estado, valor)
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- gastos %>% select (1, 5, 6, 15, 23)
names(gastos) <- c("Partido", "Nome", "UF", "Descricao", "Valor_liquido")
gastos_pb <- gastos %>% filter (UF == "PB")
cotas <- ler_cotas()
cotas <- ler_cotas()
cotas <- ler_cotas()
gastos <- ler_gastos()
cotas <- ler_cotas()
View(cotas)
cotas <- ler_cotas()
View(cotas)
cotas <- ler_cotas()
View(cotas)
tudo <- merge(gastos, cotas)
View(tudo)
cotas <- ler_cotas()
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
library(knitr)
theme_set(theme_bw())
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- gastos %>% select (1, 5, 6, 15, 23)
tudo <- merge(gastos, cotas)
names(gastos) <- c("Partido", "Nome", "UF", "Descricao", "Valor_liquido")
gastos_pb <- gastos %>% filter (UF == "PB")
View(cotas)
View(tudo)
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
library(knitr)
theme_set(theme_bw())
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- gastos %>% select (1, 5, 6, 15, 23)
tudo <- merge(gastos, cotas)
names(gastos) <- c("Partido", "Nome", "UF", "Descricao", "Valor_liquido")
gastos_pb <- gastos %>% filter (UF == "PB")
View(gastos_pb)
View(tudo)
View(gastos)
gastos <- ler_gastos()
View(gastos)
str = "2016-02-15"
str[6:7]
substring(str, 6, 7)
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- merge(gastos, cotas)
gastos <- gastos %>% select (1, 5, 6, 15, 23)
names(gastos) <- c("Partido", "Mes", "Nome", "UF", "Descricao", "Valor_liquido")
gastos_pb <- gastos %>% filter (Mes == 3)
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- merge(gastos, cotas)
gastos <- gastos %>% select (1, 2, 5, 6, 15, 23)
names(gastos) <- c("Partido", "Mes", "Nome", "UF", "Descricao", "Valor_liquido")
gastos_pb <- gastos %>% filter (Mes == 3)
gastos_marco <- gastos %>% filter (Mes == "3")
View(gastos_marco)
View(gastos)
gastos <- merge(gastos, cotas)
View(gastos)
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- merge(gastos, cotas)
#gastos <- gastos %>% select (1, 2, 5, 6, 15, 23)
#names(gastos) <- c("Partido", "Mes", "Nome", "UF", "Tipo_despesa", "Valor_liquido")
#gastos_marco <- gastos %>% filter (Mes == "3")
View(gastos)
View(gastos)
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- merge(gastos, cotas)
gastos <- gastos %>% select (1, 2, 3, 6, 15, 23)
names(gastos) <- c("UF", "Partido", "Mes", "Nome", "Tipo_despesa", "Valor_liquido")
gastos_marco <- gastos %>% filter (Mes == "3")
View(gastos_marco)
View(gastos_marco)
nrow(gastos_marco)
temp <- gastos_marco %>% filter (UF == PB)
temp <- gastos_marco %>% filter (UF == "PB")
agrupa_partido <- gasta_marco %>% group_by(Partido) %>% summarise(total = sum(Valor_liquido))
agrupa_partido <- gastos_marco %>% group_by(Partido) %>% summarise(total = sum(Valor_liquido))
View(agrupa_partido)
gastos_dem = agrupa_partido$total
View(gastos_dem)
agrupa_partido$DEM
print agrupa_partido[partido == "DEM"]
subset(agrupa_partido, Partido == "DEM")
print agrupa_partido$total, Partido == "DEM"
total_dem = agrupa_partido %>% filter (Partido == "DEM")
View(total_dem)
print agrupa_partido[1, 1]
print agrupa_partido[which(agrupa_partido$Partido == "DEM"),]
print agrupa_partido[which(agrupa_partido$Partido == "DEM")]
gastos_marco <- gastos %>% filter (Mes == "3" && UF == "PB")
ler_gastos <- function(arquivo = "dados/ano-atual.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
gastos = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
gastos = gastos %>%
mutate_each(funs(as.factor), sgPartido, sgUF, txNomeParlamentar, indTipoDocumento)
return(gastos)
}
ler_cotas <- function(arquivo = "dados/valor-cota-por-estado.csv"){
#' Lê um csv criado a partir dos dados de gastos dos deputados da
#' Câmara e seta os tipos de colunas mais convenientemente.
#' Versão sem readr, para máquinas onde não é possível instalar esse pacote.
#' É um pouco mais lenta que a com readr.
require("dplyr", warn.conflicts = FALSE)
cota = read.csv(arquivo, stringsAsFactors = FALSE, encoding='UTF-8')
return(cota)
}
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- merge(gastos, cotas)
gastos <- gastos %>% select (1, 2, 3, 6, 15, 23)
names(gastos) <- c("UF", "Partido", "Mes", "Nome", "Tipo_despesa", "Valor_liquido")
gastos_marco <- gastos %>% filter (Mes == "3" && UF == "PB")
gastos_pb <- gastos %>% filter (UF == "PB")
View(gastos_pb)
gastos_marco <- gastos %>% filter (Mes == "3" & UF == "PB")
View(gastos_marco)
View(gastos)
gastos <- ler_gastos()
cotas <- ler_cotas()
gastos <- merge(gastos, cotas)
View(gastos)
nrow(gastos %>% group_by(Nome))
agrupado = gastos %>% group_by(Nome)
gastos <- gastos %>% select (1, 2, 3, 6, 15, 23, 30)
names(gastos) <- c("UF", "Partido", "Mes", "Nome", "Tipo_despesa", "Valor_liquido", "Cota")
agrupado = gastos %>% group_by(Nome)
nrow(agrupado)
View(agrupado)
nrow()
pb <- gastos %>% filter(UF == "PB")
pb <- pb %>% group_by(Nome)
View(pb)
pb <- pb %>% group_by(Nome) %>% summarise(total = sum(Valor_liquido))
nrow(pb)
gastos_marco <- gastos %>% filter (Mes == "3" & UF == "PB")
View(gastos_marco)
print sum(gastos_marco$Valor_liquido)
sum(gastos_marco$Valor_liquido)
sum(gastos_marco$Valor_liquido) / 13
(sum(gastos_marco$Valor_liquido) / 13) / gastos_marco$Cota
(sum(gastos_marco$Valor_liquido) / 13) / gastos_marco$Cota[0]
(sum(gastos_marco$Valor_liquido) / 13) / 42032,56
(sum(gastos_marco$Valor_liquido) / 13) / 42032.56
